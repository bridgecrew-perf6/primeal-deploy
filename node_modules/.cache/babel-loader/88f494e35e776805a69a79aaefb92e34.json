{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GAstVisitor = void 0;\n\nvar model_1 = require(\"./model\");\n\nvar GAstVisitor =\n/** @class */\nfunction () {\n  function GAstVisitor() {}\n\n  GAstVisitor.prototype.visit = function (node) {\n    var nodeAny = node;\n\n    switch (nodeAny.constructor) {\n      case model_1.NonTerminal:\n        return this.visitNonTerminal(nodeAny);\n\n      case model_1.Alternative:\n        return this.visitAlternative(nodeAny);\n\n      case model_1.Option:\n        return this.visitOption(nodeAny);\n\n      case model_1.RepetitionMandatory:\n        return this.visitRepetitionMandatory(nodeAny);\n\n      case model_1.RepetitionMandatoryWithSeparator:\n        return this.visitRepetitionMandatoryWithSeparator(nodeAny);\n\n      case model_1.RepetitionWithSeparator:\n        return this.visitRepetitionWithSeparator(nodeAny);\n\n      case model_1.Repetition:\n        return this.visitRepetition(nodeAny);\n\n      case model_1.Alternation:\n        return this.visitAlternation(nodeAny);\n\n      case model_1.Terminal:\n        return this.visitTerminal(nodeAny);\n\n      case model_1.Rule:\n        return this.visitRule(nodeAny);\n\n      /* istanbul ignore next */\n\n      default:\n        throw Error(\"non exhaustive match\");\n    }\n  };\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n\n\n  GAstVisitor.prototype.visitNonTerminal = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n\n\n  GAstVisitor.prototype.visitAlternative = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n\n\n  GAstVisitor.prototype.visitOption = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n\n\n  GAstVisitor.prototype.visitRepetition = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n\n\n  GAstVisitor.prototype.visitRepetitionMandatory = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n\n\n  GAstVisitor.prototype.visitRepetitionMandatoryWithSeparator = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n\n\n  GAstVisitor.prototype.visitRepetitionWithSeparator = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n\n\n  GAstVisitor.prototype.visitAlternation = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n\n\n  GAstVisitor.prototype.visitTerminal = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n\n\n  GAstVisitor.prototype.visitRule = function (node) {};\n\n  return GAstVisitor;\n}();\n\nexports.GAstVisitor = GAstVisitor;","map":{"version":3,"mappings":";;;;;;;AAAA;;AAcA;AAAA;AAAA;AAAA,0BA6DC;;AA5DQA,gCAAP,UAAaC,IAAb,EAA8B;AAC5B,QAAMC,OAAO,GAAQD,IAArB;;AACA,YAAQC,OAAO,CAACC,WAAhB;AACE,WAAKC,mBAAL;AACE,eAAO,KAAKC,gBAAL,CAAsBH,OAAtB,CAAP;;AACF,WAAKE,mBAAL;AACE,eAAO,KAAKE,gBAAL,CAAsBJ,OAAtB,CAAP;;AACF,WAAKE,cAAL;AACE,eAAO,KAAKG,WAAL,CAAiBL,OAAjB,CAAP;;AACF,WAAKE,2BAAL;AACE,eAAO,KAAKI,wBAAL,CAA8BN,OAA9B,CAAP;;AACF,WAAKE,wCAAL;AACE,eAAO,KAAKK,qCAAL,CAA2CP,OAA3C,CAAP;;AACF,WAAKE,+BAAL;AACE,eAAO,KAAKM,4BAAL,CAAkCR,OAAlC,CAAP;;AACF,WAAKE,kBAAL;AACE,eAAO,KAAKO,eAAL,CAAqBT,OAArB,CAAP;;AACF,WAAKE,mBAAL;AACE,eAAO,KAAKQ,gBAAL,CAAsBV,OAAtB,CAAP;;AACF,WAAKE,gBAAL;AACE,eAAO,KAAKS,aAAL,CAAmBX,OAAnB,CAAP;;AACF,WAAKE,YAAL;AACE,eAAO,KAAKU,SAAL,CAAeZ,OAAf,CAAP;;AACF;;AACA;AACE,cAAMa,KAAK,CAAC,sBAAD,CAAX;AAvBJ;AAyBD,GA3BM;AA6BP;;;AACOf,2CAAP,UAAwBC,IAAxB,EAAyC,CAAS,CAA3C;AAEP;;;AACOD,2CAAP,UAAwBC,IAAxB,EAAyC,CAAS,CAA3C;AAEP;;;AACOD,sCAAP,UAAmBC,IAAnB,EAA+B,CAAS,CAAjC;AAEP;;;AACOD,0CAAP,UAAuBC,IAAvB,EAAuC,CAAS,CAAzC;AAEP;;;AACOD,mDAAP,UAAgCC,IAAhC,EAAyD,CAAS,CAA3D;AAEP;;;AACOD,gEAAP,UACEC,IADF,EACwC,CAC/B,CAFF;AAIP;;;AACOD,uDAAP,UAAoCC,IAApC,EAAiE,CAAS,CAAnE;AAEP;;;AACOD,2CAAP,UAAwBC,IAAxB,EAAyC,CAAS,CAA3C;AAEP;;;AACOD,wCAAP,UAAqBC,IAArB,EAAmC,CAAS,CAArC;AAEP;;;AACOD,oCAAP,UAAiBC,IAAjB,EAA2B,CAAS,CAA7B;;AACT;AAAC,CA7DD;;AAAsBe","names":["GAstVisitor","node","nodeAny","constructor","model_1","visitNonTerminal","visitAlternative","visitOption","visitRepetitionMandatory","visitRepetitionMandatoryWithSeparator","visitRepetitionWithSeparator","visitRepetition","visitAlternation","visitTerminal","visitRule","Error","exports"],"sources":["C:\\Users\\ryany\\OneDrive\\桌面\\primeal\\node_modules\\@chevrotain\\gast\\src\\visitor.ts"],"sourcesContent":["import {\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n  Terminal\n} from \"./model\"\nimport { IProduction } from \"@chevrotain/types\"\n\nexport abstract class GAstVisitor {\n  public visit(node: IProduction): any {\n    const nodeAny: any = node\n    switch (nodeAny.constructor) {\n      case NonTerminal:\n        return this.visitNonTerminal(nodeAny)\n      case Alternative:\n        return this.visitAlternative(nodeAny)\n      case Option:\n        return this.visitOption(nodeAny)\n      case RepetitionMandatory:\n        return this.visitRepetitionMandatory(nodeAny)\n      case RepetitionMandatoryWithSeparator:\n        return this.visitRepetitionMandatoryWithSeparator(nodeAny)\n      case RepetitionWithSeparator:\n        return this.visitRepetitionWithSeparator(nodeAny)\n      case Repetition:\n        return this.visitRepetition(nodeAny)\n      case Alternation:\n        return this.visitAlternation(nodeAny)\n      case Terminal:\n        return this.visitTerminal(nodeAny)\n      case Rule:\n        return this.visitRule(nodeAny)\n      /* istanbul ignore next */\n      default:\n        throw Error(\"non exhaustive match\")\n    }\n  }\n\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  public visitNonTerminal(node: NonTerminal): any {}\n\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  public visitAlternative(node: Alternative): any {}\n\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  public visitOption(node: Option): any {}\n\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  public visitRepetition(node: Repetition): any {}\n\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  public visitRepetitionMandatory(node: RepetitionMandatory): any {}\n\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  public visitRepetitionMandatoryWithSeparator(\n    node: RepetitionMandatoryWithSeparator\n  ): any {}\n\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  public visitRepetitionWithSeparator(node: RepetitionWithSeparator): any {}\n\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  public visitAlternation(node: Alternation): any {}\n\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  public visitTerminal(node: Terminal): any {}\n\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  public visitRule(node: Rule): any {}\n}\n"]},"metadata":{},"sourceType":"script"}