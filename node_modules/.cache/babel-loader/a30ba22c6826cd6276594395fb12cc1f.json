{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateGrammar = exports.resolveGrammar = void 0;\n\nvar forEach_1 = __importDefault(require(\"lodash/forEach\"));\n\nvar defaults_1 = __importDefault(require(\"lodash/defaults\"));\n\nvar resolver_1 = require(\"../resolver\");\n\nvar checks_1 = require(\"../checks\");\n\nvar errors_public_1 = require(\"../../errors_public\");\n\nfunction resolveGrammar(options) {\n  var actualOptions = (0, defaults_1.default)(options, {\n    errMsgProvider: errors_public_1.defaultGrammarResolverErrorProvider\n  });\n  var topRulesTable = {};\n  (0, forEach_1.default)(options.rules, function (rule) {\n    topRulesTable[rule.name] = rule;\n  });\n  return (0, resolver_1.resolveGrammar)(topRulesTable, actualOptions.errMsgProvider);\n}\n\nexports.resolveGrammar = resolveGrammar;\n\nfunction validateGrammar(options) {\n  options = (0, defaults_1.default)(options, {\n    errMsgProvider: errors_public_1.defaultGrammarValidatorErrorProvider\n  });\n  return (0, checks_1.validateGrammar)(options.rules, options.maxLookahead, options.tokenTypes, options.errMsgProvider, options.grammarName);\n}\n\nexports.validateGrammar = validateGrammar;","map":{"version":3,"mappings":";;;;;;;;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AAeA,SAAgBA,cAAhB,CACEC,OADF,EAC6B;AAE3B,MAAMC,aAAa,GAAiC,wBAASD,OAAT,EAAkB;AACpEE,kBAAc,EAAEC;AADoD,GAAlB,CAApD;AAIA,MAAMC,aAAa,GAAiC,EAApD;AACA,yBAAQJ,OAAO,CAACK,KAAhB,EAAuB,UAACC,IAAD,EAAK;AAC1BF,iBAAa,CAACE,IAAI,CAACC,IAAN,CAAb,GAA2BD,IAA3B;AACD,GAFD;AAGA,SAAO,+BAAkBF,aAAlB,EAAiCH,aAAa,CAACC,cAA/C,CAAP;AACD;;AAZDM;;AAcA,SAAgBC,eAAhB,CAAgCT,OAAhC,EAMC;AACCA,SAAO,GAAG,wBAASA,OAAT,EAAkB;AAC1BE,kBAAc,EAAEC;AADU,GAAlB,CAAV;AAIA,SAAO,8BACLH,OAAO,CAACK,KADH,EAELL,OAAO,CAACU,YAFH,EAGLV,OAAO,CAACW,UAHH,EAILX,OAAO,CAACE,cAJH,EAKLF,OAAO,CAACY,WALH,CAAP;AAOD;;AAlBDJ","names":["resolveGrammar","options","actualOptions","errMsgProvider","errors_public_1","topRulesTable","rules","rule","name","exports","validateGrammar","maxLookahead","tokenTypes","grammarName"],"sources":["C:\\Users\\ryany\\OneDrive\\桌面\\primeal\\node_modules\\chevrotain\\src\\parse\\grammar\\gast\\gast_resolver_public.ts"],"sourcesContent":["import { Rule } from \"@chevrotain/gast\"\nimport forEach from \"lodash/forEach\"\nimport defaults from \"lodash/defaults\"\nimport { resolveGrammar as orgResolveGrammar } from \"../resolver\"\nimport { validateGrammar as orgValidateGrammar } from \"../checks\"\nimport {\n  defaultGrammarResolverErrorProvider,\n  defaultGrammarValidatorErrorProvider\n} from \"../../errors_public\"\nimport { TokenType } from \"@chevrotain/types\"\nimport {\n  IGrammarResolverErrorMessageProvider,\n  IGrammarValidatorErrorMessageProvider,\n  IParserDefinitionError\n} from \"../types\"\n\ntype ResolveGrammarOpts = {\n  rules: Rule[]\n  errMsgProvider?: IGrammarResolverErrorMessageProvider\n}\nexport function resolveGrammar(\n  options: ResolveGrammarOpts\n): IParserDefinitionError[] {\n  const actualOptions: Required<ResolveGrammarOpts> = defaults(options, {\n    errMsgProvider: defaultGrammarResolverErrorProvider\n  })\n\n  const topRulesTable: { [ruleName: string]: Rule } = {}\n  forEach(options.rules, (rule) => {\n    topRulesTable[rule.name] = rule\n  })\n  return orgResolveGrammar(topRulesTable, actualOptions.errMsgProvider)\n}\n\nexport function validateGrammar(options: {\n  rules: Rule[]\n  maxLookahead: number\n  tokenTypes: TokenType[]\n  grammarName: string\n  errMsgProvider: IGrammarValidatorErrorMessageProvider\n}): IParserDefinitionError[] {\n  options = defaults(options, {\n    errMsgProvider: defaultGrammarValidatorErrorProvider\n  })\n\n  return orgValidateGrammar(\n    options.rules,\n    options.maxLookahead,\n    options.tokenTypes,\n    options.errMsgProvider,\n    options.grammarName\n  )\n}\n"]},"metadata":{},"sourceType":"script"}